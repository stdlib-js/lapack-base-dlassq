{
  "version": 3,
  "sources": ["../lib/base.js", "../lib/dlassq.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar abs2 = require( '@stdlib/math-base-special-abs2' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\n\n\n// VARIABLES //\n\nvar SBIG = 1.11137937474253874e-162;\nvar SSML = 4.49891379454319638e+161;\nvar TBIG = 1.99791907220223503e+146;\nvar TSML = 1.49166814624004135e-154;\n\n\n// MAIN //\n\n/**\n* Returns an updated sum of squares represented in scaled form.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} X - input array\n* @param {integer} strideX - stride length for `X`\n* @param {NonNegativeInteger} offsetX - starting index for `X`\n* @param {number} scale - scaling factor\n* @param {number} sumsq - basic sum of squares from which output is factored out\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var out = new Float64Array( [ 0.0, 0.0 ] );\n*\n* dlassq( 4, X, 1, 0, 1.0, 0.0, out, 1, 0 );\n* // out => <Float64Array>[ 1.0, 30.0 ]\n*/\nfunction dlassq( N, X, strideX, offsetX, scale, sumsq, out, strideOut, offsetOut ) { // eslint-disable-line max-len\n\tvar notbig;\n\tvar abig;\n\tvar asml;\n\tvar amed;\n\tvar ymin;\n\tvar ymax;\n\tvar ax;\n\tvar ox;\n\tvar i;\n\n\tif ( isnan( scale ) || isnan( sumsq ) ) {\n\t\treturn out;\n\t}\n\tif ( sumsq === 0.0 ) {\n\t\tscale = 1.0;\n\t}\n\tif ( scale === 0.0 ) {\n\t\tscale = 1.0;\n\t\tsumsq = 0.0;\n\t}\n\tif ( N <= 0 ) {\n\t\tout[ offsetOut ] = scale;\n\t\tout[ offsetOut + strideOut ] = sumsq;\n\t\treturn out;\n\t}\n\t/*\n\t* Compute the sum of squares in 3 accumulators:\n\t*\n\t* -   `abig`: sums of squares scaled down to avoid overflow\n\t* -   `asml`: sums of squares scaled up to avoid underflow\n\t* -   `amed`: sums of squares that do not require scaling\n\t*\n\t* The thresholds and multipliers are\n\t*\n\t* -   `tbig`: values bigger than this are scaled down by `sbig`\n\t* -   `tsml`: values smaller than this are scaled up by `ssml`\n\t*/\n\tnotbig = true;\n\tasml = 0.0;\n\tamed = 0.0;\n\tabig = 0.0;\n\tox = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = abs( X[ ox ] );\n\t\tif ( ax > TBIG ) {\n\t\t\tabig += abs2( ax*SBIG );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < TSML ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml += abs2( ax*SSML );\n\t\t\t}\n\t\t} else {\n\t\t\tamed += abs2( ax );\n\t\t}\n\t\tox += strideX;\n\t}\n\t// Put the existing sum of squares into one of the accumulators...\n\tif ( sumsq > 0.0 ) {\n\t\tax = scale * sqrt( sumsq );\n\t\tif ( ax > TBIG ) {\n\t\t\tif ( scale > 1.0 ) {\n\t\t\t\tscale *= SBIG;\n\t\t\t\tabig += scale * ( scale * sumsq );\n\t\t\t} else {\n\t\t\t\t// `sumsq > tbig^2` => `(sbig * (sbig * sumsq))` is representable\n\t\t\t\tabig += scale * ( scale * ( SBIG * ( SBIG*sumsq ) ) );\n\t\t\t}\n\t\t} else if ( ax < TSML ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tif ( scale < 1.0 ) {\n\t\t\t\t\tscale *= SSML;\n\t\t\t\t\tasml += scale * ( scale*sumsq );\n\t\t\t\t} else {\n\t\t\t\t\t// `sumsq < tsml^2` => `(ssml * (ssml * sumsq))` is representable\n\t\t\t\t\tasml += scale * ( scale * ( SSML * ( SSML*sumsq ) ) );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tamed += scale * ( scale*sumsq );\n\t\t}\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig > 0`...\n\t\tif ( amed > 0.0 || isnan( amed ) ) {\n\t\t\tabig += ( amed*SBIG ) * SBIG;\n\t\t}\n\t\tout[ offsetOut ] = 1.0 / SBIG;\n\t\tout[ offsetOut + strideOut ] = abig;\n\t\treturn out;\n\t}\n\tif ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml > 0`...\n\t\tif ( amed > 0.0 || isnan( amed ) ) {\n\t\t\tamed = sqrt( amed );\n\t\t\tasml = sqrt( asml ) / SSML;\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscale = 1.0;\n\t\t\tsumsq = abs2( ymax ) * ( 1.0 + abs2( ymin/ymax ) );\n\t\t} else {\n\t\t\tscale = 1.0 / SSML;\n\t\t\tsumsq = asml;\n\t\t}\n\t\tout[ offsetOut ] = scale;\n\t\tout[ offsetOut + strideOut ] = sumsq;\n\t\treturn out;\n\t}\n\t// Otherwise all values are mid-range or zero...\n\tout[ offsetOut ] = 1.0;\n\tout[ offsetOut + strideOut ] = amed;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dlassq;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float64Array = require( '@stdlib/array-float64' );\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Returns an updated sum of squares represented in scaled form.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} X - input array\n* @param {integer} strideX - stride length for `X`\n* @param {number} scale - scaling factor\n* @param {number} sumsq - basic sum of squares from which output is factored out\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* var out = dlassq( 4, X, 1, 1.0, 0.0 );\n* // returns <Float64Array>[ 1.0, 30.0 ]\n*/\nfunction dlassq( N, X, strideX, scale, sumsq ) {\n\tvar out;\n\tvar ox;\n\n\tox = stride2offset( N, strideX );\n\tout = new Float64Array( 2 );\n\treturn base( N, X, strideX, ox, scale, sumsq, out, 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dlassq;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Returns an updated sum of squares represented in scaled form using alternative indexing semantics.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} X - input array\n* @param {integer} strideX - stride length for `X`\n* @param {NonNegativeInteger} offsetX - starting index for `X`\n* @param {number} scale - scaling factor\n* @param {number} sumsq - basic sum of squares from which output is factored out\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var out = new Float64Array( [ 0.0, 0.0 ] );\n*\n* dlassq( 4, X, 1, 0, 1.0, 0.0, out, 1, 0 );\n* // out => <Float64Array>[ 1.0, 30.0 ]\n*/\nfunction dlassq( N, X, strideX, offsetX, scale, sumsq, out, strideOut, offsetOut ) {\n\treturn base( N, X, strideX, offsetX, scale, sumsq, out, strideOut, offsetOut );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dlassq;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dlassq = require( './dlassq.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dlassq, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dlassq;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* LAPACK routine to return an updated sum of squares represented in scaled form.\n*\n* @module @stdlib/lapack-base-dlassq\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dlassq = require( '@stdlib/lapack-base-dlassq' );\n*\n* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* var out = dlassq( X.length, X, 1, 1.0, 0.0 );\n* // returns <Float64Array>[ 1.0, 30.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dlassq = require( '@stdlib/lapack-base-dlassq' );\n*\n* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var out = new Float64Array( [ 0.0, 0.0 ] );\n*\n* dlassq.ndarray( X.length, X, 1, 0, 1.0, 0.0, out, 1, 0 );\n* // out => <Float64Array>[ 1.0, 30.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dlassq;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdlassq = main;\n} else {\n\tdlassq = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dlassq;\n"],
  "mappings": "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",
  "names": ["require_base", "__commonJSMin", "exports", "module", "isnan", "abs2", "abs", "sqrt", "SBIG", "SSML", "TBIG", "TSML", "dlassq", "N", "X", "strideX", "offsetX", "scale", "sumsq", "out", "strideOut", "offsetOut", "notbig", "abig", "asml", "amed", "ymin", "ymax", "ax", "ox", "i", "require_dlassq", "__commonJSMin", "exports", "module", "Float64Array", "stride2offset", "base", "dlassq", "N", "X", "strideX", "scale", "sumsq", "out", "ox", "require_ndarray", "__commonJSMin", "exports", "module", "base", "dlassq", "N", "X", "strideX", "offsetX", "scale", "sumsq", "out", "strideOut", "offsetOut", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dlassq", "ndarray", "join", "tryRequire", "isError", "main", "dlassq", "tmp"]
}
