{"version":3,"file":"index.mjs","sources":["../lib/base.js","../lib/dlassq.js","../lib/main.js","../lib/ndarray.js","../lib/index.js","../718cb374983281404926e15abe0b65"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs2 from '@stdlib/math-base-special-abs2';\nimport abs from '@stdlib/math-base-special-abs';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// VARIABLES //\n\nvar SBIG = 1.11137937474253874e-162;\nvar SSML = 4.49891379454319638e+161;\nvar TBIG = 1.99791907220223503e+146;\nvar TSML = 1.49166814624004135e-154;\n\n\n// MAIN //\n\n/**\n* Returns an updated sum of squares represented in scaled form.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} X - input array\n* @param {integer} strideX - stride length for `X`\n* @param {NonNegativeInteger} offsetX - starting index for `X`\n* @param {number} scale - scaling factor\n* @param {number} sumsq - basic sum of squares from which output is factored out\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var out = new Float64Array( [ 0.0, 0.0 ] );\n*\n* dlassq( 4, X, 1, 0, 1.0, 0.0, out, 1, 0 );\n* // out => <Float64Array>[ 1.0, 30.0 ]\n*/\nfunction dlassq( N, X, strideX, offsetX, scale, sumsq, out, strideOut, offsetOut ) { // eslint-disable-line max-len\n\tvar notbig;\n\tvar abig;\n\tvar asml;\n\tvar amed;\n\tvar ymin;\n\tvar ymax;\n\tvar ax;\n\tvar ox;\n\tvar i;\n\n\tif ( isnan( scale ) || isnan( sumsq ) ) {\n\t\treturn out;\n\t}\n\tif ( sumsq === 0.0 ) {\n\t\tscale = 1.0;\n\t}\n\tif ( scale === 0.0 ) {\n\t\tscale = 1.0;\n\t\tsumsq = 0.0;\n\t}\n\tif ( N <= 0 ) {\n\t\tout[ offsetOut ] = scale;\n\t\tout[ offsetOut + strideOut ] = sumsq;\n\t\treturn out;\n\t}\n\t/*\n\t* Compute the sum of squares in 3 accumulators:\n\t*\n\t* -   `abig`: sums of squares scaled down to avoid overflow\n\t* -   `asml`: sums of squares scaled up to avoid underflow\n\t* -   `amed`: sums of squares that do not require scaling\n\t*\n\t* The thresholds and multipliers are\n\t*\n\t* -   `tbig`: values bigger than this are scaled down by `sbig`\n\t* -   `tsml`: values smaller than this are scaled up by `ssml`\n\t*/\n\tnotbig = true;\n\tasml = 0.0;\n\tamed = 0.0;\n\tabig = 0.0;\n\tox = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = abs( X[ ox ] );\n\t\tif ( ax > TBIG ) {\n\t\t\tabig += abs2( ax*SBIG );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < TSML ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml += abs2( ax*SSML );\n\t\t\t}\n\t\t} else {\n\t\t\tamed += abs2( ax );\n\t\t}\n\t\tox += strideX;\n\t}\n\t// Put the existing sum of squares into one of the accumulators...\n\tif ( sumsq > 0.0 ) {\n\t\tax = scale * sqrt( sumsq );\n\t\tif ( ax > TBIG ) {\n\t\t\tif ( scale > 1.0 ) {\n\t\t\t\tscale *= SBIG;\n\t\t\t\tabig += scale * ( scale * sumsq );\n\t\t\t} else {\n\t\t\t\t// `sumsq > tbig^2` => `(sbig * (sbig * sumsq))` is representable\n\t\t\t\tabig += scale * ( scale * ( SBIG * ( SBIG*sumsq ) ) );\n\t\t\t}\n\t\t} else if ( ax < TSML ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tif ( scale < 1.0 ) {\n\t\t\t\t\tscale *= SSML;\n\t\t\t\t\tasml += scale * ( scale*sumsq );\n\t\t\t\t} else {\n\t\t\t\t\t// `sumsq < tsml^2` => `(ssml * (ssml * sumsq))` is representable\n\t\t\t\t\tasml += scale * ( scale * ( SSML * ( SSML*sumsq ) ) );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tamed += scale * ( scale*sumsq );\n\t\t}\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig > 0`...\n\t\tif ( amed > 0.0 || isnan( amed ) ) {\n\t\t\tabig += ( amed*SBIG ) * SBIG;\n\t\t}\n\t\tout[ offsetOut ] = 1.0 / SBIG;\n\t\tout[ offsetOut + strideOut ] = abig;\n\t\treturn out;\n\t}\n\tif ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml > 0`...\n\t\tif ( amed > 0.0 || isnan( amed ) ) {\n\t\t\tamed = sqrt( amed );\n\t\t\tasml = sqrt( asml ) / SSML;\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscale = 1.0;\n\t\t\tsumsq = abs2( ymax ) * ( 1.0 + abs2( ymin/ymax ) );\n\t\t} else {\n\t\t\tscale = 1.0 / SSML;\n\t\t\tsumsq = asml;\n\t\t}\n\t\tout[ offsetOut ] = scale;\n\t\tout[ offsetOut + strideOut ] = sumsq;\n\t\treturn out;\n\t}\n\t// Otherwise all values are mid-range or zero...\n\tout[ offsetOut ] = 1.0;\n\tout[ offsetOut + strideOut ] = amed;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dlassq;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float64Array from '@stdlib/array-float64';\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Returns an updated sum of squares represented in scaled form.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} X - input array\n* @param {integer} strideX - stride length for `X`\n* @param {number} scale - scaling factor\n* @param {number} sumsq - basic sum of squares from which output is factored out\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* var out = dlassq( 4, X, 1, 1.0, 0.0 );\n* // returns <Float64Array>[ 1.0, 30.0 ]\n*/\nfunction dlassq( N, X, strideX, scale, sumsq ) {\n\tvar out;\n\tvar ox;\n\n\tox = stride2offset( N, strideX );\n\tout = new Float64Array( 2 );\n\treturn base( N, X, strideX, ox, scale, sumsq, out, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default dlassq;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dlassq from './dlassq.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dlassq, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dlassq;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Returns an updated sum of squares represented in scaled form using alternative indexing semantics.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} X - input array\n* @param {integer} strideX - stride length for `X`\n* @param {NonNegativeInteger} offsetX - starting index for `X`\n* @param {number} scale - scaling factor\n* @param {number} sumsq - basic sum of squares from which output is factored out\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var out = new Float64Array( [ 0.0, 0.0 ] );\n*\n* dlassq( 4, X, 1, 0, 1.0, 0.0, out, 1, 0 );\n* // out => <Float64Array>[ 1.0, 30.0 ]\n*/\nfunction dlassq( N, X, strideX, offsetX, scale, sumsq, out, strideOut, offsetOut ) {\n\treturn base( N, X, strideX, offsetX, scale, sumsq, out, strideOut, offsetOut );\n}\n\n\n// EXPORTS //\n\nexport default dlassq;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* LAPACK routine to return an updated sum of squares represented in scaled form.\n*\n* @module @stdlib/lapack-base-dlassq\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import dlassq from '@stdlib/lapack-base-dlassq';\n*\n* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n*\n* var out = dlassq( X.length, X, 1, 1.0, 0.0 );\n* // returns <Float64Array>[ 1.0, 30.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import dlassq from '@stdlib/lapack-base-dlassq';\n*\n* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var out = new Float64Array( [ 0.0, 0.0 ] );\n*\n* dlassq.ndarray( X.length, X, 1, 0, 1.0, 0.0, out, 1, 0 );\n* // out => <Float64Array>[ 1.0, 30.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils-try-require';\nimport isError from '@stdlib/assert-is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dlassq;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdlassq = main;\n} else {\n\tdlassq = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dlassq;\n","export default '/home/runner/work/lapack-base-dlassq/lapack-base-dlassq/lib'"],"names":["SBIG","SSML","TBIG","TSML","dlassq","N","X","strideX","offsetX","scale","sumsq","out","strideOut","offsetOut","notbig","abig","asml","amed","ymin","ymax","ax","ox","i","isnan","abs","abs2","sqrt","base","stride2offset","Float64Array","setReadOnly","tmp","tryRequire","join","require$$0","dlassq$1","isError","main"],"mappings":";;m0GA8BIA,EAAO,uBACPC,EAAO,sBACPC,EAAO,qBACPC,EAAO,uBA6BX,SAASC,EAAQC,EAAGC,EAAGC,EAASC,EAASC,EAAOC,EAAOC,EAAKC,EAAWC,GACtE,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKC,EAAOd,IAAWc,EAAOb,GAC7B,OAAOC,EASR,GAPe,IAAVD,IACJD,EAAQ,GAEM,IAAVA,IACJA,EAAQ,EACRC,EAAQ,GAEJL,GAAK,EAGT,OAFAM,EAAKE,GAAcJ,EACnBE,EAAKE,EAAYD,GAAcF,EACxBC,EAmBR,IALAG,GAAS,EACTE,EAAO,EACPC,EAAO,EACPF,EAAO,EACPM,EAAKb,EACCc,EAAI,EAAGA,EAAIjB,EAAGiB,KACnBF,EAAKI,EAAKlB,EAAGe,KACHnB,GACTa,GAAQU,EAAML,EAAGpB,GACjBc,GAAS,GACEM,EAAKjB,EACXW,IACJE,GAAQS,EAAML,EAAGnB,IAGlBgB,GAAQQ,EAAML,GAEfC,GAAMd,EA4BP,OAzBKG,EAAQ,KACZU,EAAKX,EAAQiB,EAAMhB,IACTR,EAGRa,GAFIN,EAAQ,GACZA,GAAST,IACSS,EAAQC,GAGlBD,GAAUA,GAAUT,GAASA,EAAKU,KAEhCU,EAAKjB,EACXW,IAGHE,GAFIP,EAAQ,GACZA,GAASR,IACSQ,EAAMC,GAGhBD,GAAUA,GAAUR,GAASA,EAAKS,MAI5CO,GAAQR,GAAUA,EAAMC,IAIrBK,EAAO,IAENE,EAAO,GAAOM,EAAON,MACzBF,GAAUE,EAAKjB,EAASA,GAEzBW,EAAKE,GAAc,EAAMb,EACzBW,EAAKE,EAAYD,GAAcG,EACxBJ,GAEHK,EAAO,GAENC,EAAO,GAAOM,EAAON,IACzBA,EAAOS,EAAMT,IACbD,EAAOU,EAAMV,GAASf,GACVgB,GACXC,EAAOD,EACPE,EAAOH,IAEPE,EAAOF,EACPG,EAAOF,GAERR,EAAQ,EACRC,EAAQe,EAAMN,IAAW,EAAMM,EAAMP,EAAKC,MAE1CV,EAAQ,EAAMR,EACdS,EAAQM,GAETL,EAAKE,GAAcJ,EACnBE,EAAKE,EAAYD,GAAcF,EACxBC,IAGRA,EAAKE,GAAc,EACnBF,EAAKE,EAAYD,GAAcK,EACxBN,EACR,CCrIA,SAASP,EAAQC,EAAGC,EAAGC,EAASE,EAAOC,GAMtC,OAAOiB,EAAMtB,EAAGC,EAAGC,EAFdqB,EAAevB,EAAGE,GAESE,EAAOC,EADjC,IAAImB,EAAc,GAC2B,EAAG,EACvD,CCzBAC,EAAA1B,EAAA,WCuBA,SAAiBC,EAAGC,EAAGC,EAASC,EAASC,EAAOC,EAAOC,EAAKC,EAAWC,GACtE,OAAOc,EAAMtB,EAAGC,EAAGC,EAASC,EAASC,EAAOC,EAAOC,EAAKC,EAAWC,EACpE,ICPA,IASIkB,EAAMC,GAAYC,EATXC,EAAkBD,MC/Cd,8DDwDwB,gBAUvCE,EATKC,EAASL,GACJM,EAEAN"}